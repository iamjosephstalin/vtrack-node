// Pagination function
function paginate(model) {
    return async (req, res, next) => {
      const page = parseInt(req.query.page);
      const limit = parseInt(req.query.limit);
      const startIndex = (page - 1) * limit;
      const endIndex = page * limit;
      const all  = await model.countDocuments({});

      const result = {};
      result.count = all;
    // change model.length to model.countDocuments() because you are counting directly from mongodb
      if (endIndex < (await model.countDocuments().exec())) {
        result.next = {
          page: page + 1,
          limit: limit,
        };
      }
      if (startIndex > 0) {
        result.previous = {
          page: page - 1,
          limit: limit,
        };
      }
      try {
  //       .limit(limit).skip(startIndex) replaced the slice method because 
  //       it is done directly from mongodb and they are one of mongodb methods
        result.results = await model.find().limit(limit).skip(startIndex);
        res.paginatedResult = result;
        next();
      } catch (e) {
        res.status(500).json({ message: e.message });
      }
    };
  }

  // Search 
  function search(model,column) {
    return async (req, res, next) => {
    try {
        const allClient = await model.find({ column : { $regex : new RegExp(String(req.query.text), "i") } });
        if(!allClient || allClient.length === 0){
            res.status(400).send({error : "No Data found"});
            next();
        }else{
            res.status(200).send(allClient)
            next();
        }  
      } catch (e) {
        res.status(500).json({ message: e.message });
      }
};
  }
  module.exports = { paginate, search };
